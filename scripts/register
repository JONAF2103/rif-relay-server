#!/bin/bash
# Copied and adapted from https://gist.github.com/hoylen/6607180
# to cover the different version of the getopt command avaialble on
# Linux and macOS: https://stackoverflow.com/a/4300224/6816965

PROG=`basename $0`
if [ ! -f "dist/commands/Register.js" ]; then
  npm run build
fi

# getopts options
SHORT_OPTS=f:s:a:m:h
LONG_OPTS=funds:,stake:,account:,mnemonic:,help

# help message
SHORT_HELP="Usage: $PROG [options]
Options:
  -f amount     an optional amount of funds to set up (by default 10)
  -s amount     an optional the amount of stake to set up (by default 20)
  -a account    an optional account to use for funding and staking (it requires the mnemonic parameter)
  -m mnemonic   an optional mnemonic to use for unlocking the account parameter (it requires the account parameter)
  -h            show this help message"

LONG_HELP="Usage: $PROG [options]
Options:
  -f | --funds      amount    an optional amount of funds to set up (by default 10)
  -s | --output     amount    an optional the amount of stake to set up (by default 20)
  -a | --account    account   an optional account to use for funding and staking (it requires the mnemonic parameter)
  -m | --mnemonic   mnemonic  an optional mnemonic to use for unlocking the account parameter (it requires the account parameter)
  -h | --help                 show this help message"


# default paramters
STAKE=20
FUNDS=10
MNEMONIC=""
ACCOUNT=""

HAS_GNU_ENHANCED_GETOPT=
if getopt -T >/dev/null; then :
else
  if [ $? -eq 4 ]; then
    HAS_GNU_ENHANCED_GETOPT=yes
  fi
fi

function showUsage() {
  if [ -n "$HAS_GNU_ENHANCED_GETOPT" ]
    then echo "$LONG_HELP";
    else echo "$SHORT_HELP";
  fi;
}

if [ -n "$HAS_GNU_ENHANCED_GETOPT" ]; then
  # Use GNU enhanced getopt
  if ! getopt --name "$PROG" --long $LONG_OPTS --options $SHORT_OPTS -- "$@" >/dev/null; then
    echo "$PROG: usage error (use -h or --help for help)" >&2
    exit 2
  fi
  ARGS=`getopt --name "$PROG" --long $LONG_OPTS --options $SHORT_OPTS -- "$@"`
else
  # Use original getopt (no long option names, no whitespace, no sorting)
  if ! getopt $SHORT_OPTS "$@" >/dev/null; then
    echo "$PROG: usage error (use -h for help)" >&2
    exit 2
  fi    
  ARGS=`getopt $SHORT_OPTS "$@"`
fi
eval set -- $ARGS

while [ $# -gt 0 ]; do
  case "$1" in
  -s | --stake) STAKE=$(echo "$2" | xargs); shift;;
  -f | --funds) FUNDS=$(echo "$2" | xargs); shift;;
  -a | --account)    ACCOUNT=$(echo "$2" | xargs); shift;;
  -m | --mnemonic)   MNEMONIC=$(echo "$2" | xargs); shift;;
  -h | --help)  showUsage; exit 0; shift;;
  # -- means the end of the arguments; drop this, and break out of the while loop
  --) shift; break ;;
  # If invalid options were passed, then getopt should have reported an error,
  # which we checked as VALID_ARGUMENTS when getopt was called...
  *) echo "Unexpected option: $1 - this should not happen."; showUsage; exit 1;;
  esac
  shift
done

# Variables set (either by reading from user inpur or with default value)
echo "STAKE: $STAKE"
echo "FUNDS: ${FUNDS}"
echo "MNEMONIC: ${MNEMONIC}"
echo "ACCOUNT: ${ACCOUNT}"

# For debug purposes only, we should never enter in the if
if [ $# -gt 0 ]; then
  # Remaining parameters can be processed
  for ARG in "$@"; do
    echo "$PROG: argument: $ARG"
  done
fi

if [ "${STAKE}" == "" ]; then
  echo "Error, stake has to be specified!"
  exit 1
fi

if [ "${FUNDS}" == "" ]; then
  echo "Error, funds has to be specified!"
  exit 1
fi

if [ "${ACCOUNT}" == "" ] && [ "${MNEMONIC}" != "" ] || [ "${ACCOUNT}" != "" ] && [ "${MNEMONIC}" == "" ]; then
  echo "Error, account and mnemonic are both necessary!"
  exit 1
fi

if [ "${ACCOUNT}" != "" ] && [ "${MNEMONIC}" != "" ]; then
  node dist/commands/Register.js --config server-config.json --funds="${FUNDS}" --stake="${STAKE}" --account="${ACCOUNT}" --mnemonic="${MNEMONIC}"
else
  node dist/commands/Register.js --config server-config.json --funds="${FUNDS}" --stake="${STAKE}"
fi
